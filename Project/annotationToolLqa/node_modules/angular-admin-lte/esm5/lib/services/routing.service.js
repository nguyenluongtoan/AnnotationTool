/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NavigationEnd, PRIMARY_OUTLET, Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
/**
 * @record
 */
export function Path() { }
/** @type {?} */
Path.prototype.data;
/** @type {?} */
Path.prototype.params;
/** @type {?} */
Path.prototype.url;
/**
 * @record
 */
export function Paths() { }
var RoutingService = /** @class */ (function () {
    /**
     * @method constructor
     * @param router [description]
     */
    function RoutingService(router) {
        this.router = router;
        this.onChange = new BehaviorSubject(undefined);
        this.events = new BehaviorSubject(undefined);
        this.init();
    }
    /**
     * [createUrl description]
     * \@method createUrl
     * @param {?} route [description]
     * @return {?} [description]
     */
    RoutingService.createUrl = /**
     * [createUrl description]
     * \@method createUrl
     * @param {?} route [description]
     * @return {?} [description]
     */
    function (route) {
        /** @type {?} */
        var url = route.url.map(function (urlSegment) { return urlSegment.toString(); }).join('/');
        return url;
    };
    /**
     * [isChildrenSelfRoute description]
     * \@method isChildrenSelfRoute
     * @param {?} route [description]
     * @return {?} [description]
     */
    RoutingService.isChildrenSelfRoute = /**
     * [isChildrenSelfRoute description]
     * \@method isChildrenSelfRoute
     * @param {?} route [description]
     * @return {?} [description]
     */
    function (route) {
        route.routeConfig.children.forEach(function (child) {
            if (child.path === '' && (child.component || child.loadChildren)) {
                return true;
            }
        });
        return false;
    };
    /**
     * [createBreadcrumb description]
     * \@method createBreadcrumb
     * @param {?} route [description]
     * @param {?} url   [description]
     * @return {?} [description]
     */
    RoutingService.createBreadcrumb = /**
     * [createBreadcrumb description]
     * \@method createBreadcrumb
     * @param {?} route [description]
     * @param {?} url   [description]
     * @return {?} [description]
     */
    function (route, url) {
        /** @type {?} */
        var isUrl = true;
        if (route.children.length !== 0 && route.firstChild.routeConfig.path) {
            if (url !== '/' && !route.routeConfig.loadChildren && !route.routeConfig.component && !RoutingService.isChildrenSelfRoute(route)) {
                isUrl = false;
            }
        }
        return {
            data: route.data,
            params: route.params,
            url: isUrl ? url : null
        };
    };
    /**
     * [init description]
     * \@method init
     * @return {?}
     */
    RoutingService.prototype.init = /**
     * [init description]
     * \@method init
     * @return {?}
     */
    function () {
        var _this = this;
        this.router.events.subscribe(function (routeEvent) {
            // https://github.com/angular/angular/issues/17473: event not fired anymore on load for routed component.
            // https://github.com/angular/angular/issues/17473: event not fired anymore on load for routed component.
            _this.events.next(routeEvent);
            if (routeEvent instanceof NavigationEnd) {
                /** @type {?} */
                var route = _this.router.routerState.root.snapshot;
                /** @type {?} */
                var tmpUrl = '';
                /** @type {?} */
                var url = '';
                /** @type {?} */
                var rootRoot = true;
                /** @type {?} */
                var paths = [];
                while (route.children.length) {
                    route = route.firstChild;
                    tmpUrl = "/" + RoutingService.createUrl(route);
                    if (route.outlet !== PRIMARY_OUTLET || (!route.routeConfig.path && !rootRoot)) {
                        continue;
                    }
                    rootRoot = false;
                    if (route.params || route.data) {
                        for (var key in route.params) {
                            if (!key) {
                                continue;
                            }
                            if (route.data['title']) {
                                route.data['title'] = route.data['title'].replace(":" + key, route.params[key]);
                                route.data['title'] = route.data['title'].replace(":" + key, route.params[key]);
                            }
                            if (route.data['breadcrumbs']) {
                                route.data['breadcrumbs'] = route.data['breadcrumbs'].replace(":" + key, route.params[key]);
                            }
                            if (route.data['description']) {
                                route.data['description'] = route.data['description'].replace(":" + key, route.params[key]);
                            }
                        }
                    }
                    if (tmpUrl === '/') {
                        paths.push(RoutingService.createBreadcrumb(route, tmpUrl));
                    }
                    else {
                        url += tmpUrl;
                        paths.push(RoutingService.createBreadcrumb(route, url));
                    }
                }
                _this.onChange.next(paths);
            }
        });
    };
    RoutingService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    RoutingService.ctorParameters = function () { return [
        { type: Router }
    ]; };
    return RoutingService;
}());
export { RoutingService };
if (false) {
    /** @type {?} */
    RoutingService.prototype.onChange;
    /** @type {?} */
    RoutingService.prototype.events;
    /** @type {?} */
    RoutingService.prototype.router;
}

//# sourceMappingURL=data:application/json;base64,