/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Renderer2, ElementRef } from '@angular/core';
var ClassService = /** @class */ (function () {
    function ClassService(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.currentClasses = [];
    }
    /**
     * @param {?} cssClasses
     * @return {?}
     */
    ClassService.prototype.applyClasses = /**
     * @param {?} cssClasses
     * @return {?}
     */
    function (cssClasses) {
        var _this = this;
        if (typeof cssClasses === 'string') {
            cssClasses = cssClasses.split(' ');
        }
        /** @type {?} */
        var classesToRemove = this.currentClasses.filter(function (x) { return cssClasses.indexOf(x) === -1; });
        classesToRemove.forEach(function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, cssClasse);
            }
        });
        /** @type {?} */
        var classesToAdd = cssClasses.filter(function (x) { return _this.currentClasses.indexOf(x) === -1; });
        classesToAdd.forEach(function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.addClass(_this.elementRef.nativeElement, cssClasse);
            }
        });
        // Update current classes for futur updates
        this.currentClasses = tslib_1.__spread(cssClasses);
    };
    ClassService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ClassService.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return ClassService;
}());
export { ClassService };
if (false) {
    /** @type {?} */
    ClassService.prototype.currentClasses;
    /** @type {?} */
    ClassService.prototype.elementRef;
    /** @type {?} */
    ClassService.prototype.renderer2;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYWRtaW4tbHRlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2NsYXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0lBU2hFLHNCQUNVLFlBQ0E7UUFEQSxlQUFVLEdBQVYsVUFBVTtRQUNWLGNBQVMsR0FBVCxTQUFTOzhCQUpxQixFQUFFO0tBS3RDOzs7OztJQUdHLG1DQUFZOzs7O2NBQUMsVUFBa0M7O1FBQ3BELEVBQUUsQ0FBQyxDQUFDLE9BQU8sVUFBVSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEM7O1FBR0QsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUE1QixDQUE0QixDQUFDLENBQUM7UUFDdEYsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7WUFDL0IsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDZCxLQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUN0RTtTQUNGLENBQUMsQ0FBQzs7UUFHSCxJQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQXJDLENBQXFDLENBQUMsQ0FBQztRQUNuRixZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUztZQUM1QixFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNkLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ25FO1NBQ0YsQ0FBQyxDQUFDOztRQUdILElBQUksQ0FBQyxjQUFjLG9CQUFRLFVBQVUsQ0FBQyxDQUFDOzs7Z0JBaEMxQyxVQUFVOzs7O2dCQUxxQixVQUFVO2dCQUFyQixTQUFTOzt1QkFBOUI7O1NBTWEsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKlxuICpcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENsYXNzU2VydmljZSB7XG4gIHByaXZhdGUgY3VycmVudENsYXNzZXM6IEFycmF5PHN0cmluZz4gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMlxuICApIHt9XG5cblxuICBwdWJsaWMgYXBwbHlDbGFzc2VzKGNzc0NsYXNzZXM6IHN0cmluZyB8IEFycmF5PHN0cmluZz4pOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIGNzc0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjc3NDbGFzc2VzID0gY3NzQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBvbmx5IGNsYXNzZXMgdGhhdCBhcmUgbm90IGluIGNzc0NsYXNzZXNcbiAgICBjb25zdCBjbGFzc2VzVG9SZW1vdmUgPSB0aGlzLmN1cnJlbnRDbGFzc2VzLmZpbHRlcih4ID0+IGNzc0NsYXNzZXMuaW5kZXhPZih4KSA9PT0gLTEpO1xuICAgIGNsYXNzZXNUb1JlbW92ZS5mb3JFYWNoKGNzc0NsYXNzZSA9PiB7XG4gICAgICBpZiAoY3NzQ2xhc3NlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjc3NDbGFzc2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQWRkIG9ubHkgY2xhc3NlcyB0aGF0IGFyZSBub3QgaW4gY3VycmVudENsYXNzZXNcbiAgICBjb25zdCBjbGFzc2VzVG9BZGQgPSBjc3NDbGFzc2VzLmZpbHRlcih4ID0+IHRoaXMuY3VycmVudENsYXNzZXMuaW5kZXhPZih4KSA9PT0gLTEpO1xuICAgIGNsYXNzZXNUb0FkZC5mb3JFYWNoKGNzc0NsYXNzZSA9PiB7XG4gICAgICBpZiAoY3NzQ2xhc3NlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjc3NDbGFzc2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIGN1cnJlbnQgY2xhc3NlcyBmb3IgZnV0dXIgdXBkYXRlc1xuICAgIHRoaXMuY3VycmVudENsYXNzZXMgPSBbLi4uIGNzc0NsYXNzZXNdO1xuICB9XG59XG4iXX0=