/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { WrapperService } from '../wrapper/wrapper.service';
import { LayoutStore } from '../layout.store';
import { SidebarRightService } from './sidebar-right.service';
import { removeListeners, removeSubscriptions } from '../../helpers';
var SidebarRightComponent = /** @class */ (function () {
    function SidebarRightComponent(elementRef, renderer2, layoutStore, sidebarRightService, wrapperService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.sidebarRightService = sidebarRightService;
        this.wrapperService = wrapperService;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    SidebarRightComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.renderer2.addClass(this.elementRef.nativeElement, 'control-sidebar');
        this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe(function (value) {
            _this.isSidebarRightCollapsed = value;
            if (!value) {
                _this.renderer2.addClass(_this.elementRef.nativeElement, 'control-sidebar-open');
                if (!_this.isSidebarRightOverContent) {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
            else {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, 'control-sidebar-open');
                if (!_this.isSidebarRightOverContent) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.isSidebarRightOverContent.subscribe(function (value) {
            _this.isSidebarRightOverContent = value;
            if (!_this.isSidebarRightCollapsed) {
                if (value) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
                else {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        }));
        this.subscriptions.push(this.layoutStore.sidebarRightSkin.subscribe(function (value) {
            if (_this.skin !== value) {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, "control-sidebar-" + _this.skin);
            }
            _this.skin = value;
            _this.renderer2.addClass(_this.elementRef.nativeElement, "control-sidebar-" + value);
        }));
    };
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    SidebarRightComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        this.sidebarRightService.elementRef = this.sidebarContentElement;
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    SidebarRightComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    SidebarRightComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-sidebar-right',
                    template: "<div #sidebarContentElement class=\"control-sidebar-content\">\n  <ng-content></ng-content>\n</div>\n<div class=\"control-sidebar-bg\"></div>\n",
                    styles: [":host{display:block;height:100%}.control-sidebar-bg{z-index:-1}/deep/ .tab-content{padding:10px 15px}"],
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    SidebarRightComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: LayoutStore },
        { type: SidebarRightService },
        { type: WrapperService }
    ]; };
    SidebarRightComponent.propDecorators = {
        sidebarContentElement: [{ type: ViewChild, args: ['sidebarContentElement',] }]
    };
    return SidebarRightComponent;
}());
export { SidebarRightComponent };
if (false) {
    /** @type {?} */
    SidebarRightComponent.prototype.layout;
    /** @type {?} */
    SidebarRightComponent.prototype.skin;
    /** @type {?} */
    SidebarRightComponent.prototype.isSidebarRightOverContent;
    /** @type {?} */
    SidebarRightComponent.prototype.isSidebarRightCollapsed;
    /** @type {?} */
    SidebarRightComponent.prototype.listeners;
    /** @type {?} */
    SidebarRightComponent.prototype.subscriptions;
    /** @type {?} */
    SidebarRightComponent.prototype.sidebarContentElement;
    /** @type {?} */
    SidebarRightComponent.prototype.elementRef;
    /** @type {?} */
    SidebarRightComponent.prototype.renderer2;
    /** @type {?} */
    SidebarRightComponent.prototype.layoutStore;
    /** @type {?} */
    SidebarRightComponent.prototype.sidebarRightService;
    /** @type {?} */
    SidebarRightComponent.prototype.wrapperService;
}

//# sourceMappingURL=data:application/json;base64,