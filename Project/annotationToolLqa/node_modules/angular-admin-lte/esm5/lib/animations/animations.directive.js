/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, Output, ElementRef, EventEmitter, Renderer2, NgZone } from '@angular/core';
var CollapseAnimationDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     * @param ngZone     [description]
     * @param renderer2  [description]
     */
    function CollapseAnimationDirective(elementRef, ngZone, renderer2) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.firstStart = true;
        this.collapseAnimationDuration = 350;
        this.startEventEmitter = new EventEmitter();
        this.doneEventEmitter = new EventEmitter();
    }
    Object.defineProperty(CollapseAnimationDirective.prototype, "_isCollapsed", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.lastIsCollapsed = this.isCollapsed;
            this.isCollapsed = value;
            if (!this.firstStart) {
                this.emit('start');
                if (value) {
                    this.collapse();
                }
                else if (value === false) {
                    this.unCollapse();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    CollapseAnimationDirective.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        if (this.collapseAnimationDuration && this.collapseAnimationDuration !== 350) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-duration', this.collapseAnimationDuration + "ms");
        }
        if (this.collapseAnimationTiming) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-timing-function', this.collapseAnimationTiming);
        }
    };
    /**
     * @method ngAfterContentInit
     */
    /**
     * \@method ngAfterContentInit
     * @return {?}
     */
    CollapseAnimationDirective.prototype.ngAfterContentInit = /**
     * \@method ngAfterContentInit
     * @return {?}
     */
    function () {
        this.emit('start');
        if (this.isCollapsed) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'none');
            this.renderer2.addClass(this.elementRef.nativeElement, 'collapsing');
        }
        this.emit('done');
        this.firstStart = false;
        this.subscriptions();
    };
    /**
     * [ngOnDestroy description]
     * @method ngOnDestroy
     * @return [description]
     */
    /**
     * [ngOnDestroy description]
     * \@method ngOnDestroy
     * @return {?} [description]
     */
    CollapseAnimationDirective.prototype.ngOnDestroy = /**
     * [ngOnDestroy description]
     * \@method ngOnDestroy
     * @return {?} [description]
     */
    function () {
        if (this.listener) {
            this.listener();
        }
    };
    /**
     * [subscriptions description]
     * \@method subscriptions
     * @return {?}
     */
    CollapseAnimationDirective.prototype.subscriptions = /**
     * [subscriptions description]
     * \@method subscriptions
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.listener = _this.renderer2.listen(_this.elementRef.nativeElement, 'transitionend', function () {
                if (!_this.isCollapsed) {
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'un-collapse');
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'collapsing');
                }
                else {
                    _this.renderer2.setStyle(_this.elementRef.nativeElement, 'display', 'none');
                }
                requestAnimationFrame(function () {
                    _this.renderer2.removeStyle(_this.elementRef.nativeElement, 'height');
                    _this.emit('done');
                    _this.transitioning = false;
                });
            });
        });
    };
    /**
     * [unCollapse description]
     * \@method unCollapse
     * @return {?}
     */
    CollapseAnimationDirective.prototype.unCollapse = /**
     * [unCollapse description]
     * \@method unCollapse
     * @return {?}
     */
    function () {
        this.transitioning = true;
        this.renderer2.addClass(this.elementRef.nativeElement, 'un-collapse');
        this.renderer2.removeStyle(this.elementRef.nativeElement, 'display');
        this.renderer2.setStyle(this.elementRef.nativeElement, 'height', this.elementRef.nativeElement.scrollHeight + "px");
    };
    /**
     * [collapse description]
     * \@method collapse
     * @return {?}
     */
    CollapseAnimationDirective.prototype.collapse = /**
     * [collapse description]
     * \@method collapse
     * @return {?}
     */
    function () {
        var _this = this;
        requestAnimationFrame(function () {
            if (!_this.transitioning) {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', _this.elementRef.nativeElement.offsetHeight + "px");
                _this.renderer2.addClass(_this.elementRef.nativeElement, 'collapsing');
            }
            _this.transitioning = true;
            requestAnimationFrame(function () {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', "0px");
            });
        });
    };
    /**
     * @param {?} phaseName
     * @return {?}
     */
    CollapseAnimationDirective.prototype.emit = /**
     * @param {?} phaseName
     * @return {?}
     */
    function (phaseName) {
        /** @type {?} */
        var event = {
            element: this.elementRef.nativeElement,
            fromState: this.lastIsCollapsed === undefined ? 'void' : this.lastIsCollapsed ? '1' : '0',
            phaseName: phaseName,
            toState: this.isCollapsed === undefined ? 'void' : this.isCollapsed ? '1' : '0',
            totalTime: this.collapseAnimationDuration,
            triggerName: 'collapseAnimation'
        };
        if (phaseName === 'done') {
            this.doneEventEmitter.emit(event);
        }
        else if (phaseName === 'start') {
            this.startEventEmitter.emit(event);
        }
    };
    CollapseAnimationDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[collapseAnimation]'
                },] },
    ];
    /** @nocollapse */
    CollapseAnimationDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    CollapseAnimationDirective.propDecorators = {
        collapseAnimationDuration: [{ type: Input }],
        collapseAnimationTiming: [{ type: Input }],
        _isCollapsed: [{ type: Input, args: ['collapseAnimation',] }],
        startEventEmitter: [{ type: Output, args: ['collapseAnimation.start',] }],
        doneEventEmitter: [{ type: Output, args: ['collapseAnimation.done',] }]
    };
    return CollapseAnimationDirective;
}());
export { CollapseAnimationDirective };
if (false) {
    /** @type {?} */
    CollapseAnimationDirective.prototype.firstStart;
    /** @type {?} */
    CollapseAnimationDirective.prototype.isCollapsed;
    /** @type {?} */
    CollapseAnimationDirective.prototype.lastIsCollapsed;
    /** @type {?} */
    CollapseAnimationDirective.prototype.transitioning;
    /** @type {?} */
    CollapseAnimationDirective.prototype.listener;
    /** @type {?} */
    CollapseAnimationDirective.prototype.collapseAnimationDuration;
    /** @type {?} */
    CollapseAnimationDirective.prototype.collapseAnimationTiming;
    /** @type {?} */
    CollapseAnimationDirective.prototype.startEventEmitter;
    /** @type {?} */
    CollapseAnimationDirective.prototype.doneEventEmitter;
    /** @type {?} */
    CollapseAnimationDirective.prototype.elementRef;
    /** @type {?} */
    CollapseAnimationDirective.prototype.ngZone;
    /** @type {?} */
    CollapseAnimationDirective.prototype.renderer2;
}

//# sourceMappingURL=data:application/json;base64,