/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ContentChild, Input } from '@angular/core';
import { removeSubscriptions } from '../../helpers';
import { InputGroupAddonLeftDirective, InputGroupAddonRightDirective, InputGroupContentDirective, InputGroupLabelDirective } from './input-group.directive';
import { InputTextDirective } from '../input-text/input-text.directive';
export class InputGroupComponent {
    constructor() {
        this.subscriptions = [];
        this.inputColor = 'default';
        this.inputErrorColor = 'danger';
        this.inputValidColor = 'success';
        this.wrapperClasses = 'form-group';
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.subscriptions.push(this.inputTextDirective.onKeyup.subscribe((value) => {
            if (value.invalid) {
                this.currentColor = this.inputErrorColor;
                this.currentFontColor = this.inputErrorFontColor;
            }
            else if (!value.invalid) {
                this.currentColor = this.inputValidColor;
                this.currentFontColor = this.inputValidFontColor;
            }
            else {
                this.currentColor = this.inputColor;
                this.currentFontColor = this.inputFontColor;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        removeSubscriptions(this.subscriptions);
    }
}
InputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-input-group',
                template: `<div [ngClass]="wrapperClasses" [mkColor]="currentColor || inputColor" mkColorPrefix="has">
  <label *ngIf="label || inputGroupLabelDirective">
    {{label}}
    <ng-content select="mk-input-group-label"></ng-content>
  </label>
  <div *ngIf="addonLeft || inputGroupAddonLeftDirective || addonRight || inputGroupAddonRightDirective; else noAddon" class="input-group">
    <span *ngIf="addonLeft || inputGroupAddonLeftDirective" class="input-group-addon">
      {{addonLeft}}
      <ng-content select="mk-input-group-addon-left"></ng-content>
    </span>
    <ng-content select="mk-input-group-content"></ng-content>
    <span *ngIf="addonRight || inputGroupAddonRightDirective" class="input-group-addon">
      {{addonRight}}
      <ng-content select="mk-input-group-addon-right"></ng-content>
    </span>
  </div>
  <ng-template #noAddon><ng-content select="mk-input-group-content"></ng-content></ng-template>
</div>
`
            },] },
];
InputGroupComponent.propDecorators = {
    addonLeft: [{ type: Input }],
    addonRight: [{ type: Input }],
    inputColor: [{ type: Input }],
    inputFontColor: [{ type: Input }],
    inputErrorColor: [{ type: Input }],
    inputErrorFontColor: [{ type: Input }],
    inputValidColor: [{ type: Input }],
    inputValidFontColor: [{ type: Input }],
    label: [{ type: Input }],
    wrapperClasses: [{ type: Input }],
    inputGroupLabelDirective: [{ type: ContentChild, args: [InputGroupLabelDirective,] }],
    inputGroupAddonLeftDirective: [{ type: ContentChild, args: [InputGroupAddonLeftDirective,] }],
    inputGroupAddonRightDirective: [{ type: ContentChild, args: [InputGroupAddonRightDirective,] }],
    inputGroupContentDirective: [{ type: ContentChild, args: [InputGroupContentDirective,] }],
    inputTextDirective: [{ type: ContentChild, args: [InputTextDirective,] }]
};
if (false) {
    /** @type {?} */
    InputGroupComponent.prototype.subscriptions;
    /** @type {?} */
    InputGroupComponent.prototype.currentColor;
    /** @type {?} */
    InputGroupComponent.prototype.currentFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.addonLeft;
    /** @type {?} */
    InputGroupComponent.prototype.addonRight;
    /** @type {?} */
    InputGroupComponent.prototype.inputColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputErrorColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputErrorFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputValidColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputValidFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.label;
    /** @type {?} */
    InputGroupComponent.prototype.wrapperClasses;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupLabelDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupAddonLeftDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupAddonRightDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupContentDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputTextDirective;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hZG1pbi1sdGUvIiwic291cmNlcyI6WyJsaWIvZm9ybS9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFNUYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFDTCw0QkFBNEIsRUFDNUIsNkJBQTZCLEVBQzdCLDBCQUEwQixFQUMxQix3QkFBd0IsRUFDekIsTUFBTSx5QkFBeUIsQ0FBQztBQUVqQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQThCeEUsTUFBTTs7NkJBQ3lDLEVBQUU7MEJBT3pCLFNBQVM7K0JBRUosUUFBUTsrQkFFUixTQUFTOzhCQUdWLFlBQVk7Ozs7O0lBUXRDLGtCQUFrQjtRQUNoQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQWdCLEVBQUUsRUFBRTtZQUNyRixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO2dCQUN6QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDO2FBQ2xEO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztnQkFDekMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQzthQUNsRDtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7YUFDN0M7U0FDRixDQUFDLENBQUMsQ0FBQztLQUNMOzs7O0lBRUQsV0FBVztRQUNULG1CQUFtQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUN6Qzs7O1lBOURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCWDthQUNBOzs7d0JBT0UsS0FBSzt5QkFDTCxLQUFLO3lCQUNMLEtBQUs7NkJBQ0wsS0FBSzs4QkFDTCxLQUFLO2tDQUNMLEtBQUs7OEJBQ0wsS0FBSztrQ0FDTCxLQUFLO29CQUNMLEtBQUs7NkJBQ0wsS0FBSzt1Q0FFTCxZQUFZLFNBQUMsd0JBQXdCOzJDQUNyQyxZQUFZLFNBQUMsNEJBQTRCOzRDQUN6QyxZQUFZLFNBQUMsNkJBQTZCO3lDQUMxQyxZQUFZLFNBQUMsMEJBQTBCO2lDQUN2QyxZQUFZLFNBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgcmVtb3ZlU3Vic2NyaXB0aW9ucyB9IGZyb20gJy4uLy4uL2hlbHBlcnMnO1xuXG5pbXBvcnQge1xuICBJbnB1dEdyb3VwQWRkb25MZWZ0RGlyZWN0aXZlLFxuICBJbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZSxcbiAgSW5wdXRHcm91cENvbnRlbnREaXJlY3RpdmUsXG4gIElucHV0R3JvdXBMYWJlbERpcmVjdGl2ZVxufSBmcm9tICcuL2lucHV0LWdyb3VwLmRpcmVjdGl2ZSc7XG5cbmltcG9ydCB7IElucHV0VGV4dERpcmVjdGl2ZSB9IGZyb20gJy4uL2lucHV0LXRleHQvaW5wdXQtdGV4dC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cblxuLypcbiAqXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21rLWlucHV0LWdyb3VwJyxcbiAgdGVtcGxhdGU6IGA8ZGl2IFtuZ0NsYXNzXT1cIndyYXBwZXJDbGFzc2VzXCIgW21rQ29sb3JdPVwiY3VycmVudENvbG9yIHx8IGlucHV0Q29sb3JcIiBta0NvbG9yUHJlZml4PVwiaGFzXCI+XG4gIDxsYWJlbCAqbmdJZj1cImxhYmVsIHx8IGlucHV0R3JvdXBMYWJlbERpcmVjdGl2ZVwiPlxuICAgIHt7bGFiZWx9fVxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIm1rLWlucHV0LWdyb3VwLWxhYmVsXCI+PC9uZy1jb250ZW50PlxuICA8L2xhYmVsPlxuICA8ZGl2ICpuZ0lmPVwiYWRkb25MZWZ0IHx8IGlucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmUgfHwgYWRkb25SaWdodCB8fCBpbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZTsgZWxzZSBub0FkZG9uXCIgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuICAgIDxzcGFuICpuZ0lmPVwiYWRkb25MZWZ0IHx8IGlucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmVcIiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+XG4gICAgICB7e2FkZG9uTGVmdH19XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1pbnB1dC1ncm91cC1hZGRvbi1sZWZ0XCI+PC9uZy1jb250ZW50PlxuICAgIDwvc3Bhbj5cbiAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1pbnB1dC1ncm91cC1jb250ZW50XCI+PC9uZy1jb250ZW50PlxuICAgIDxzcGFuICpuZ0lmPVwiYWRkb25SaWdodCB8fCBpbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZVwiIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb25cIj5cbiAgICAgIHt7YWRkb25SaWdodH19XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJtay1pbnB1dC1ncm91cC1hZGRvbi1yaWdodFwiPjwvbmctY29udGVudD5cbiAgICA8L3NwYW4+XG4gIDwvZGl2PlxuICA8bmctdGVtcGxhdGUgI25vQWRkb24+PG5nLWNvbnRlbnQgc2VsZWN0PVwibWstaW5wdXQtZ3JvdXAtY29udGVudFwiPjwvbmctY29udGVudD48L25nLXRlbXBsYXRlPlxuPC9kaXY+XG5gXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IEFycmF5PFN1YnNjcmlwdGlvbj4gPSBbXTtcblxuICBwdWJsaWMgY3VycmVudENvbG9yOiBzdHJpbmc7XG4gIHB1YmxpYyBjdXJyZW50Rm9udENvbG9yOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgYWRkb25MZWZ0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFkZG9uUmlnaHQ6IHN0cmluZztcbiAgQElucHV0KCkgaW5wdXRDb2xvciA9ICdkZWZhdWx0JztcbiAgQElucHV0KCkgaW5wdXRGb250Q29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgaW5wdXRFcnJvckNvbG9yID0gJ2Rhbmdlcic7XG4gIEBJbnB1dCgpIGlucHV0RXJyb3JGb250Q29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgaW5wdXRWYWxpZENvbG9yID0gJ3N1Y2Nlc3MnO1xuICBASW5wdXQoKSBpbnB1dFZhbGlkRm9udENvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHdyYXBwZXJDbGFzc2VzID0gJ2Zvcm0tZ3JvdXAnO1xuXG4gIEBDb250ZW50Q2hpbGQoSW5wdXRHcm91cExhYmVsRGlyZWN0aXZlKSBwdWJsaWMgaW5wdXRHcm91cExhYmVsRGlyZWN0aXZlOiBJbnB1dEdyb3VwTGFiZWxEaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoSW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZSkgcHVibGljIGlucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmU6IElucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoSW5wdXRHcm91cEFkZG9uUmlnaHREaXJlY3RpdmUpIHB1YmxpYyBpbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZTogSW5wdXRHcm91cEFkZG9uUmlnaHREaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoSW5wdXRHcm91cENvbnRlbnREaXJlY3RpdmUpIHB1YmxpYyBpbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZTogSW5wdXRHcm91cENvbnRlbnREaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoSW5wdXRUZXh0RGlyZWN0aXZlKSBwdWJsaWMgaW5wdXRUZXh0RGlyZWN0aXZlOiBJbnB1dFRleHREaXJlY3RpdmU7XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuaW5wdXRUZXh0RGlyZWN0aXZlLm9uS2V5dXAuc3Vic2NyaWJlKCh2YWx1ZTogTmdDb250cm9sKSA9PiB7XG4gICAgICBpZiAodmFsdWUuaW52YWxpZCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRDb2xvciA9IHRoaXMuaW5wdXRFcnJvckNvbG9yO1xuICAgICAgICB0aGlzLmN1cnJlbnRGb250Q29sb3IgPSB0aGlzLmlucHV0RXJyb3JGb250Q29sb3I7XG4gICAgICB9IGVsc2UgaWYgKCF2YWx1ZS5pbnZhbGlkKSB7XG4gICAgICAgIHRoaXMuY3VycmVudENvbG9yID0gdGhpcy5pbnB1dFZhbGlkQ29sb3I7XG4gICAgICAgIHRoaXMuY3VycmVudEZvbnRDb2xvciA9IHRoaXMuaW5wdXRWYWxpZEZvbnRDb2xvcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3VycmVudENvbG9yID0gdGhpcy5pbnB1dENvbG9yO1xuICAgICAgICB0aGlzLmN1cnJlbnRGb250Q29sb3IgPSB0aGlzLmlucHV0Rm9udENvbG9yO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHJlbW92ZVN1YnNjcmlwdGlvbnModGhpcy5zdWJzY3JpcHRpb25zKTtcbiAgfVxufVxuIl19